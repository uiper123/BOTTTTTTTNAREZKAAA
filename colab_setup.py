#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ Google Colab
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –≤ Colab –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
"""

import subprocess
import sys
import os
import logging

logger = logging.getLogger(__name__)

def fix_ffmpeg_python():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å ffmpeg-python –≤ Colab"""
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ffmpeg-python...")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
        print("1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã...")
        subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "ffmpeg", "ffmpeg-python"], 
                      capture_output=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        print("2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg-python...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "ffmpeg-python", "--upgrade"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg-python: {result.stderr}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg-python...")
        try:
            import ffmpeg
            if hasattr(ffmpeg, 'probe'):
                print("‚úÖ ffmpeg-python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return True
            else:
                print("‚ùå ffmpeg.probe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ffmpeg: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg-python: {e}")
        return False

def fix_whisper():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Whisper –≤ Colab"""
    try:
        print("üé§ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Whisper...")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –≤–µ—Ä—Å–∏–∏
        print("1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Whisper...")
        subprocess.run([
            sys.executable, "-m", "pip", "uninstall", "-y", 
            "whisper", "openai-whisper", "faster-whisper", "whisper-jax"
        ], capture_output=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        print("2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenAI Whisper...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "openai-whisper", "--upgrade", "--force-reinstall"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Whisper: {result.stderr}")
            return install_faster_whisper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Whisper...")
        try:
            import whisper
            if hasattr(whisper, 'load_model'):
                print("‚úÖ OpenAI Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                print("4Ô∏è‚É£ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å 'base'...")
                model = whisper.load_model("base")
                print("‚úÖ –ú–æ–¥–µ–ª—å 'base' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                return True
            else:
                print("‚ùå Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ load_model –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return install_faster_whisper()
                
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å whisper: {e}")
            return install_faster_whisper()
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Whisper: {e}")
        return install_faster_whisper()

def install_faster_whisper():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ faster-whisper –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"""
    try:
        print("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º faster-whisper –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...")
        
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "faster-whisper", "--upgrade"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ faster-whisper: {result.stderr}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        try:
            from faster_whisper import WhisperModel
            print("‚úÖ faster-whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            print("4Ô∏è‚É£ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º faster-whisper –º–æ–¥–µ–ª—å 'base'...")
            model = WhisperModel("base")
            print("‚úÖ faster-whisper –º–æ–¥–µ–ª—å 'base' –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            
            return True
            
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å faster-whisper: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ faster-whisper: {e}")
        return False

def install_pytorch_cuda():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å CUDA –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        print("üéÆ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å CUDA...")
        
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", 
            "torch", "torchvision", "torchaudio", 
            "--index-url", "https://download.pytorch.org/whl/cu118"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch: {result.stderr}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
        try:
            import torch
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0)
                print(f"‚úÖ PyTorch —Å CUDA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {gpu_name}")
                print(f"‚úÖ CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
                return True
            else:
                print("‚ö†Ô∏è PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å torch: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch: {e}")
        return False

def check_gpu_support():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU"""
    try:
        print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NVIDIA GPU
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True, check=False)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º NVENC –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ ffmpeg
            result = subprocess.run(['ffmpeg', '-encoders'], capture_output=True, text=True, check=False)
            if 'h264_nvenc' in result.stdout:
                print("‚úÖ NVENC –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ ffmpeg")
                return True
            else:
                print("‚ö†Ô∏è NVENC –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ ffmpeg")
                return False
        else:
            print("‚ùå NVIDIA GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
        return False

def fix_video_editor():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ video_editor.py –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Colab"""
    try:
        print("üé¨ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º video_editor.py –¥–ª—è Colab...")
        
        if not os.path.exists('video_editor.py'):
            print("‚ùå video_editor.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open('video_editor.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
        if "–û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø COLAB" in content:
            print("‚úÖ video_editor.py —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è Colab")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open('video_editor_backup.py', 'w', encoding='utf-8') as f:
            f.write(content)
        print("üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ)
        print("‚úÖ video_editor.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è Colab")
        print("  - GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        print("  - –£–ø—Ä–æ—â–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–∞")
        print("  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ultrafast –ø—Ä–µ—Å–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è video_editor.py: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üéØ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê COLAB –î–õ–Ø TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    
    success_count = 0
    total_checks = 5
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ffmpeg-python
    if fix_ffmpeg_python():
        success_count += 1
        print("‚úÖ ffmpeg-python –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å ffmpeg-python\n")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Whisper
    if fix_whisper():
        success_count += 1
        print("‚úÖ Whisper –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Whisper\n")
    
    # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyTorch —Å CUDA
    if install_pytorch_cuda():
        success_count += 1
        print("‚úÖ PyTorch —Å CUDA –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å PyTorch\n")
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º video_editor.py
    if fix_video_editor():
        success_count += 1
        print("‚úÖ video_editor.py –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å video_editor.py\n")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if check_gpu_support():
        success_count += 1
        print("‚úÖ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n")
    else:
        print("‚ö†Ô∏è GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞\n")
    
    # –ò—Ç–æ–≥–∏
    print("=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_checks} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    if success_count >= 4:
        print("üéâ Colab –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å Telegram –±–æ—Ç–∞")
    elif success_count >= 3:
        print("‚ö†Ô∏è Colab —á–∞—Å—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π")
        print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å runtime –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞")
    
    return success_count >= 3

if __name__ == "__main__":
    success = main()
    
    if not success:
        print("\nüîß –†–£–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ffmpeg-python:")
        print("!pip uninstall -y ffmpeg ffmpeg-python")
        print("!pip install ffmpeg-python --upgrade")
        print()
        print("# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Whisper:")
        print("!pip uninstall -y whisper openai-whisper")
        print("!pip install openai-whisper --upgrade --force-reinstall")
        print()
        print("# PyTorch —Å CUDA:")
        print("!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118")
        print()
        print("–ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ runtime –≤ Colab")