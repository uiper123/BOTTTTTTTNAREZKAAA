#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import logging
import os
from pathlib import Path
from video_processor import VideoProcessor
from video_editor import VideoEditor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_chunks_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤"""
    
    # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    test_files = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞–ø–∫–∏
    for folder in ["temp", ".", "output"]:
        folder_path = Path(folder)
        if folder_path.exists():
            test_files.extend(list(folder_path.glob("*.mp4")))
            test_files.extend(list(folder_path.glob("*.mkv")))
            test_files.extend(list(folder_path.glob("*.avi")))
    
    if not test_files:
        print("‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É temp/ –∏–ª–∏ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    video_path = str(test_files[0])
    print(f"üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è: {video_path}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    video_processor = VideoProcessor()
    video_editor = VideoEditor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = video_editor.get_video_info(video_path)
        total_duration = video_info['duration']
        
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {total_duration:.1f} —Å–µ–∫—É–Ω–¥ ({total_duration/60:.1f} –º–∏–Ω—É—Ç)")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        chunk_duration = 300  # 5 –º–∏–Ω—É—Ç
        import math
        expected_chunks = math.ceil(total_duration / chunk_duration)
        
        print(f"üì¶ –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∞–Ω–∫–æ–≤: {expected_chunks}")
        print(f"üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∏–ø–æ–≤ (–ø–æ 15 —Å–µ–∫): {int(total_duration // 15)}")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
        print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –°–û–ó–î–ê–ù–ò–ï –ß–ê–ù–ö–û–í...")
        print("=" * 60)
        
        chunks = await video_processor.split_into_chunks(video_path, chunk_duration=300)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø –ß–ê–ù–ö–û–í:")
        print(f"   –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_chunks}")
        
        if len(chunks) < expected_chunks:
            print(f"‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –°–æ–∑–¥–∞–Ω–æ –º–µ–Ω—å—à–µ —á–∞–Ω–∫–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å!")
            print(f"   –ü–æ—Ç–µ—Ä—è–Ω–æ: {expected_chunks - len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –¥–µ—Ç–∞–ª—å–Ω–æ
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ê–ù–ö–û–í:")
        print("=" * 60)
        
        total_chunks_duration = 0
        for i, chunk_path in enumerate(chunks):
            try:
                if os.path.exists(chunk_path):
                    chunk_info = video_editor.get_video_info(chunk_path)
                    chunk_duration_actual = chunk_info['duration']
                    total_chunks_duration += chunk_duration_actual
                    file_size = os.path.getsize(chunk_path) / (1024 * 1024)  # MB
                    
                    print(f"‚úÖ –ß–∞–Ω–∫ {i+1}: {chunk_duration_actual:.1f} —Å–µ–∫, {file_size:.1f} –ú–ë")
                    print(f"   –ü—É—Ç—å: {chunk_path}")
                else:
                    print(f"‚ùå –ß–∞–Ω–∫ {i+1}: –§–ê–ô–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ - {chunk_path}")
            except Exception as e:
                print(f"‚ùå –ß–∞–Ω–∫ {i+1}: –û–®–ò–ë–ö–ê - {e}")
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {total_duration:.1f} —Å–µ–∫")
        print(f"   –°—É–º–º–∞ —á–∞–Ω–∫–æ–≤: {total_chunks_duration:.1f} —Å–µ–∫")
        coverage = (total_chunks_duration / total_duration) * 100 if total_duration > 0 else 0
        print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%")
        
        if coverage < 95:
            print(f"‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ß–∞–Ω–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ {coverage:.1f}% –≤–∏–¥–µ–æ!")
            print(f"   –ü–æ—Ç–µ—Ä—è–Ω–æ: {total_duration - total_chunks_duration:.1f} —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ")
        else:
            print(f"‚úÖ –ß–∞–Ω–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç {coverage:.1f}% –≤–∏–¥–µ–æ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏
        print(f"\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –ß–ê–ù–ö–û–í...")
        for chunk_path in chunks:
            if chunk_path != video_path and os.path.exists(chunk_path):
                try:
                    os.remove(chunk_path)
                    print(f"   –£–¥–∞–ª–µ–Ω: {chunk_path}")
                except Exception as e:
                    print(f"   –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {chunk_path}: {e}")
        
        print(f"\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_chunks_creation())