#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∏–ø–æ–≤
"""

import asyncio
import logging
import os
from pathlib import Path
from video_editor import VideoEditor
from video_processor import VideoProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def debug_clips_calculation():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–ø–æ–≤"""
    
    # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    temp_dir = Path("temp")
    video_files = []
    
    if temp_dir.exists():
        video_files.extend(list(temp_dir.glob("*.mp4")))
    
    if not video_files:
        print("‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ø–∞–ø–∫–µ temp/")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    video_path = str(video_files[0])
    print(f"üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ: {video_path}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    video_editor = VideoEditor()
    video_processor = VideoProcessor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = video_editor.get_video_info(video_path)
        total_duration = video_info['duration']
        
        print(f"‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration:.1f} —Å–µ–∫—É–Ω–¥ ({total_duration/60:.1f} –º–∏–Ω—É—Ç)")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Ä–µ–∑–∫–∏
        clip_duration = 15  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–ª–∏–ø
        chunk_duration = 300  # —Å–µ–∫—É–Ω–¥ –Ω–∞ —á–∞–Ω–∫ (5 –º–∏–Ω—É—Ç)
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
        theoretical_clips = int(total_duration // clip_duration)
        print(f"üßÆ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–ø–æ–≤: {theoretical_clips} ({total_duration:.1f} / {clip_duration} = {theoretical_clips})")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        import math
        num_chunks = math.ceil(total_duration / chunk_duration)
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {num_chunks} (–ø–æ {chunk_duration} —Å–µ–∫)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —á–∞–Ω–∫–∞–º
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ß–ê–ù–ö–ê–ú:")
        print("=" * 60)
        
        total_expected_clips = 0
        
        for i in range(num_chunks):
            start_time = i * chunk_duration
            actual_chunk_duration = min(chunk_duration, total_duration - start_time)
            
            # –°–∫–æ–ª—å–∫–æ –∫–ª–∏–ø–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
            clips_in_chunk = int(actual_chunk_duration // clip_duration)
            total_expected_clips += clips_in_chunk
            
            print(f"–ß–∞–Ω–∫ {i+1}: {start_time:.1f}-{start_time + actual_chunk_duration:.1f} —Å–µ–∫ "
                  f"({actual_chunk_duration:.1f} —Å–µ–∫) ‚Üí {clips_in_chunk} –∫–ª–∏–ø–æ–≤")
        
        print(f"\nüìà –ò–¢–û–ì–û –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∏–ø–æ–≤: {total_expected_clips}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω
        print(f"\n‚ö†Ô∏è  –ü–†–û–í–ï–†–ö–ê –°–¢–†–û–ì–û–ì–û –¢–ê–ô–ú–õ–ê–ô–ù–ê:")
        print("=" * 60)
        
        min_duration = clip_duration * 0.95  # 95% –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–ø–∞
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞: {min_duration:.1f} —Å–µ–∫")
        
        strict_timeline_clips = 0
        for i in range(num_chunks):
            start_time = i * chunk_duration
            actual_chunk_duration = min(chunk_duration, total_duration - start_time)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω
            current_time = 0
            chunk_clips = 0
            
            while current_time < actual_chunk_duration:
                remaining_time = actual_chunk_duration - current_time
                
                if remaining_time < clip_duration:
                    print(f"  –ß–∞–Ω–∫ {i+1}: –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ {remaining_time:.1f} —Å–µ–∫ < {clip_duration} —Å–µ–∫")
                    break
                
                actual_clip_duration = min(clip_duration, remaining_time)
                
                if actual_clip_duration < min_duration:
                    print(f"  –ß–∞–Ω–∫ {i+1}: –ü—Ä–æ–ø—É—â–µ–Ω –∫—É—Å–æ–∫ {actual_clip_duration:.1f} —Å–µ–∫ < {min_duration:.1f} —Å–µ–∫")
                    current_time += clip_duration
                    continue
                
                chunk_clips += 1
                current_time += clip_duration
            
            strict_timeline_clips += chunk_clips
            print(f"–ß–∞–Ω–∫ {i+1}: {chunk_clips} –∫–ª–∏–ø–æ–≤ (—Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω)")
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏: {theoretical_clips} –∫–ª–∏–ø–æ–≤")
        print(f"–ü–æ —á–∞–Ω–∫–∞–º: {total_expected_clips} –∫–ª–∏–ø–æ–≤") 
        print(f"–°—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω: {strict_timeline_clips} –∫–ª–∏–ø–æ–≤")
        
        if strict_timeline_clips < theoretical_clips * 0.8:
            print(f"‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –°—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª–∏–ø–æ–≤!")
            print(f"   –ü–æ—Ç–µ—Ä—è: {theoretical_clips - strict_timeline_clips} –∫–ª–∏–ø–æ–≤ ({((theoretical_clips - strict_timeline_clips) / theoretical_clips * 100):.1f}%)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_clips_calculation())