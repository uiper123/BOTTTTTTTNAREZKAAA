#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å ffmpeg –≤ Google Colab
"""

import subprocess
import sys
import os
import logging

logger = logging.getLogger(__name__)

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤–µ—Ä—Å–∏–∏ ffmpeg"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True, check=False)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"‚úÖ ffmpeg –Ω–∞–π–¥–µ–Ω: {version_line}")
            return True
        else:
            print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except FileNotFoundError:
        print("‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ffmpeg: {e}")
        return False

def check_codecs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤"""
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥–µ–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–∏
        result = subprocess.run(['ffmpeg', '-encoders'], capture_output=True, text=True, check=False)
        if result.returncode == 0:
            encoders = result.stdout
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–¥–µ–∫–∏
            codecs_to_check = {
                'libx264': 'H.264 (CPU)',
                'h264_nvenc': 'H.264 (NVIDIA GPU)',
                'aac': 'AAC –∞—É–¥–∏–æ'
            }
            
            available_codecs = []
            for codec, description in codecs_to_check.items():
                if codec in encoders:
                    print(f"‚úÖ {description}: –¥–æ—Å—Ç—É–ø–µ–Ω")
                    available_codecs.append(codec)
                else:
                    print(f"‚ùå {description}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return available_codecs
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–¥–µ–∫–æ–≤")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–µ–∫–æ–≤: {e}")
        return []

def test_simple_encode():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (—á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω 1 —Å–µ–∫—É–Ω–¥–∞)
        test_input = "test_input.mp4"
        test_output = "test_output.mp4"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        create_cmd = [
            'ffmpeg', '-f', 'lavfi', '-i', 'color=black:size=640x480:duration=1',
            '-c:v', 'libx264', '-preset', 'ultrafast', '-y', test_input
        ]
        
        result = subprocess.run(create_cmd, capture_output=True, text=True, check=False)
        if result.returncode != 0:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {result.stderr}")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        encode_cmd = [
            'ffmpeg', '-i', test_input,
            '-c:v', 'libx264', '-preset', 'ultrafast', '-crf', '23',
            '-pix_fmt', 'yuv420p', '-s', '1080x1920',
            '-c:a', 'aac', '-y', test_output
        ]
        
        result = subprocess.run(encode_cmd, capture_output=True, text=True, check=False)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for f in [test_input, test_output]:
            if os.path.exists(f):
                os.remove(f)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def install_ffmpeg():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ ffmpeg –≤ Colab"""
    try:
        print("\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º ffmpeg...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
        print("1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤...")
        subprocess.run(['apt', 'update'], capture_output=True, check=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg
        print("2Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg...")
        result = subprocess.run(['apt', 'install', '-y', 'ffmpeg'], 
                              capture_output=True, text=True, check=False)
        
        if result.returncode == 0:
            print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def fix_permissions():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs_to_create = ['output', 'temp']
        for dir_name in dirs_to_create:
            if not os.path.exists(dir_name):
                os.makedirs(dir_name, exist_ok=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        test_file = "temp/test_write.txt"
        try:
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ temp/ —Ä–∞–±–æ—Ç–∞—é—Ç")
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")
        return False

def diagnose_error(error_message: str):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error_message}")
    
    common_fixes = {
        "No such file or directory": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º",
        "Permission denied": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞",
        "Invalid argument": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ffmpeg",
        "Encoder not found": "–ö–æ–¥–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "Protocol not found": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º",
        "Cannot allocate memory": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏"
    }
    
    for error_pattern, fix in common_fixes.items():
        if error_pattern.lower() in error_message.lower():
            print(f"üí° –í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {fix}")
            return fix
    
    print("üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ runtime –≤ Colab")
    print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")
    print("  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FFMPEG –í COLAB")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg
    ffmpeg_ok = check_ffmpeg()
    
    if not ffmpeg_ok:
        print("\nüîß –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ffmpeg...")
        if install_ffmpeg():
            ffmpeg_ok = check_ffmpeg()
    
    if ffmpeg_ok:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–µ–∫–∏
        available_codecs = check_codecs()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        permissions_ok = fix_permissions()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if 'libx264' in available_codecs and 'aac' in available_codecs:
            encode_ok = test_simple_encode()
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–¥–µ–∫–æ–≤")
            encode_ok = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print(f"  ffmpeg: {'‚úÖ' if ffmpeg_ok else '‚ùå'}")
        print(f"  –ö–æ–¥–µ–∫–∏: {'‚úÖ' if available_codecs else '‚ùå'}")
        print(f"  –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {'‚úÖ' if permissions_ok else '‚ùå'}")
        print(f"  –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ' if encode_ok else '‚ùå'}")
        
        if all([ffmpeg_ok, available_codecs, permissions_ok, encode_ok]):
            print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ")
        else:
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    else:
        print("\n‚ùå ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")

if __name__ == "__main__":
    main()