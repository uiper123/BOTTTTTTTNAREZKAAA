import os
import asyncio
import logging
import ffmpeg
from pathlib import Path
from youtube_downloader import YouTubeDownloader
from video_editor import VideoEditor
from subtitle_generator import SubtitleGenerator
from google_drive_uploader import GoogleDriveUploader
from gpu_monitor import GPUMonitor

logger = logging.getLogger(__name__)

class VideoProcessor:
    def __init__(self):
        self.youtube_downloader = YouTubeDownloader()
        self.video_editor = VideoEditor()
        self.subtitle_generator = SubtitleGenerator()
        self.drive_uploader = GoogleDriveUploader()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.temp_dir = Path("temp")
        self.output_dir = Path("output")
        self.temp_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
    
    async def process_youtube_video(self, url: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –≤–∏–¥–µ–æ"""
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ: {url}")
            download_result = await self.youtube_downloader.download_with_cookies(url)
            
            if not download_result['success']:
                return {'success': False, 'error': download_result['error']}
            
            video_path = download_result['video_path']
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.process_video_file(video_path, config)
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            if os.path.exists(video_path):
                os.remove(video_path)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def process_video_file(self, video_path: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º GPU"""
        try:
            duration = config.get('duration', 30)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU
            gpu_monitor = GPUMonitor()
            monitor_task = asyncio.create_task(gpu_monitor.start_monitoring(interval=1.0))
            
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_info = self.video_editor.get_video_info(video_path)
                total_duration = video_info['duration']
                
                logger.info(f"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {total_duration} —Å–µ–∫—É–Ω–¥ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º GPU")
                
                # 2. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
                chunks = []
                if total_duration > 300:  # 5 –º–∏–Ω—É—Ç
                    logger.info(f"üî™ –í–∏–¥–µ–æ {total_duration:.1f} —Å–µ–∫ > 300 —Å–µ–∫, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏")
                    chunks = await self.split_into_chunks(video_path, chunk_duration=300)
                    logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
                else:
                    logger.info(f"üìπ –í–∏–¥–µ–æ {total_duration:.1f} —Å–µ–∫ <= 300 —Å–µ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏–∫–æ–º")
                    chunks = [video_path]
            
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                existing_chunks = []
                for i, chunk_path in enumerate(chunks):
                    if os.path.exists(chunk_path):
                        chunk_info = self.video_editor.get_video_info(chunk_path)
                        existing_chunks.append(chunk_path)
                        logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chunk_path} ({chunk_info['duration']:.1f} —Å–µ–∫)")
                    else:
                        logger.error(f"‚ùå –ß–∞–Ω–∫ {i+1} –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: {chunk_path}")
                
                logger.info(f"üìä –ò–¢–û–ì–û –≥–æ—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {len(existing_chunks)}/{len(chunks)}")
                chunks = existing_chunks
                
                # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
                all_clips = []
                total_expected_clips = 0
                
                for i, chunk_path in enumerate(chunks):
                    logger.info(f"üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–∞ {i+1}/{len(chunks)}: {chunk_path}")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ
                        chunk_info = self.video_editor.get_video_info(chunk_path)
                        chunk_duration = chunk_info['duration']
                        expected_clips_in_chunk = int(chunk_duration // duration)
                        total_expected_clips += expected_clips_in_chunk
                        
                        logger.info(f"   üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞: {chunk_duration:.1f} —Å–µ–∫")
                        logger.info(f"   üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∏–ø–æ–≤: {expected_clips_in_chunk}")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —á–∞–Ω–∫–∞
                        logger.info(f"   üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã...")
                        subtitles = await self.subtitle_generator.generate(chunk_path)
                        logger.info(f"   ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã: {len(subtitles)} —Ñ—Ä–∞–∑")
                        
                        # –ù–∞—Ä–µ–∑–∞–µ–º —á–∞–Ω–∫ –Ω–∞ –∫–ª–∏–ø—ã
                        logger.info(f"   ‚úÇÔ∏è  –ù–∞—Ä–µ–∑–∞–µ–º –Ω–∞ –∫–ª–∏–ø—ã...")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è Tesla T4
                        clips = await self.video_editor.create_clips_parallel(
                            chunk_path, 
                            duration, 
                            subtitles,
                            start_index=len(all_clips),
                            config=config,
                            max_parallel=32  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Tesla T4 (15GB –ø–∞–º—è—Ç–∏)
                        )
                        
                        logger.info(f"   üéâ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤ –∏–∑ —á–∞–Ω–∫–∞ {i+1}: {len(clips)}")
                        all_clips.extend(clips)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i+1}: {e}")
                        continue
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞–Ω–∫ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
                    if chunk_path != video_path and os.path.exists(chunk_path):
                        os.remove(chunk_path)
                        logger.info(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞–Ω–∫: {chunk_path}")
                
                # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
                logger.info(f"üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:")
                logger.info(f"   üìπ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {total_duration:.1f} —Å–µ–∫")
                logger.info(f"   üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
                logger.info(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –∫–ª–∏–ø–æ–≤: {total_expected_clips}")
                logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {len(all_clips)}")
                logger.info(f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(all_clips)/total_expected_clips*100:.1f}%" if total_expected_clips > 0 else "   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 0%")
                
                # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                import time
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤...")
                time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                
                # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–ª–∏–ø—ã –Ω–∞ Google Drive
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(all_clips)} –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive")
                upload_results = await self.drive_uploader.upload_clips(all_clips)
                
                # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
                links_file = await self.create_links_file(upload_results)
                
                # 6. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                successful_uploads = sum(1 for r in upload_results if r.get('success', False))
                if successful_uploads > 0:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful_uploads}/{len(all_clips)} –∫–ª–∏–ø–æ–≤, –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã")
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    self.cleanup_successful_files(all_clips, upload_results)
                else:
                    logger.warning("–ù–∏ –æ–¥–∏–Ω –∫–ª–∏–ø –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                
                return {
                    'success': True,
                    'total_clips': len(all_clips),
                    'links_file': links_file,
                    'upload_results': upload_results
                }
                
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU
                gpu_monitor.stop_monitoring()
                await monitor_task
                gpu_monitor.print_summary()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def split_into_chunks(self, video_path: str, chunk_duration: int = 300) -> list:
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ + –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å)"""
        try:
            video_info = self.video_editor.get_video_info(video_path)
            total_duration = int(video_info['duration'])
            
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—Ç–∫–æ–µ - –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            if total_duration <= chunk_duration:
                logger.info(f"–í–∏–¥–µ–æ {total_duration} —Å–µ–∫ <= {chunk_duration} —Å–µ–∫, –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏")
                return [video_path]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            import math
            num_chunks = math.ceil(total_duration / chunk_duration)
            logger.info(f"–î–µ–ª–∏–º –≤–∏–¥–µ–æ {total_duration} —Å–µ–∫ –Ω–∞ {num_chunks} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_duration} —Å–µ–∫")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chunk_tasks = []
            chunk_paths = []
            
            for i in range(num_chunks):
                start_time = i * chunk_duration
                actual_duration = min(chunk_duration, total_duration - start_time)
                chunk_path = self.temp_dir / f"chunk_{i}.mp4"
                
                chunk_tasks.append({
                    'input_path': video_path,
                    'output_path': str(chunk_path),
                    'start_time': start_time,
                    'duration': actual_duration,
                    'index': i
                })
                chunk_paths.append(str(chunk_path))
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –°–£–ü–ï–† –ë–´–°–¢–†–£–Æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –Ω–∞—Ä–µ–∑–∫—É {len(chunk_tasks)} —á–∞–Ω–∫–æ–≤...")
            
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ ffmpeg
            tasks = [
                self._create_chunk_ultra_fast(task) 
                for task in chunk_tasks
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_chunks = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {result}")
                elif result:
                    successful_chunks.append(chunk_paths[i])
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1}/{num_chunks} –≥–æ—Ç–æ–≤: {chunk_tasks[i]['duration']} —Å–µ–∫")
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫ {i}")
            
            logger.info(f"üöÄ –°–£–ü–ï–† –ë–´–°–¢–†–û —Å–æ–∑–¥–∞–Ω–æ {len(successful_chunks)}/{num_chunks} —á–∞–Ω–∫–æ–≤")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
            logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ß–ê–ù–ö–û–í:")
            total_chunks_duration = 0
            for i, chunk_path in enumerate(successful_chunks):
                try:
                    if os.path.exists(chunk_path):
                        chunk_info = self.video_editor.get_video_info(chunk_path)
                        chunk_duration = chunk_info['duration']
                        total_chunks_duration += chunk_duration
                        logger.info(f"   ‚úÖ –ß–∞–Ω–∫ {i+1}: {chunk_duration:.1f} —Å–µ–∫ - {chunk_path}")
                    else:
                        logger.error(f"   ‚ùå –ß–∞–Ω–∫ {i+1}: –§–ê–ô–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ - {chunk_path}")
                except Exception as e:
                    logger.error(f"   ‚ùå –ß–∞–Ω–∫ {i+1}: –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø - {e}")
            
            logger.info(f"üìä –ò–¢–û–ì–û –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–æ–≤: {total_chunks_duration:.1f} —Å–µ–∫ –∏–∑ {total_duration:.1f} —Å–µ–∫")
            coverage = (total_chunks_duration / total_duration) * 100 if total_duration > 0 else 0
            logger.info(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ —á–∞–Ω–∫–∞–º–∏: {coverage:.1f}%")
            
            if coverage < 95:
                logger.warning(f"‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ß–∞–Ω–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ {coverage:.1f}% –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ!")
            
            return successful_chunks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏: {e}")
            return [video_path]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    
    async def _create_chunk_ultra_fast(self, task: dict) -> bool:
        """–°–£–ü–ï–† –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ fallback"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ {task['index']}: {task['start_time']}-{task['start_time'] + task['duration']} —Å–µ–∫")
            
            loop = asyncio.get_event_loop()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
            await asyncio.wait_for(
                loop.run_in_executor(
                    None,
                    self._create_chunk_direct_command,
                    task['input_path'],
                    task['output_path'], 
                    task['start_time'],
                    task['duration']
                ),
                timeout=60.0  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if os.path.exists(task['output_path']):
                file_size = os.path.getsize(task['output_path'])
                logger.info(f"‚úÖ –ß–∞–Ω–∫ {task['index']} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {file_size} –±–∞–π—Ç")
                return True
            else:
                logger.error(f"‚ùå –ß–∞–Ω–∫ {task['index']} –ù–ï –°–û–ó–î–ê–õ–°–Ø: —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}, –ø—Ä–æ–±—É–µ–º CPU fallback")
            # –ü—Ä–æ–±—É–µ–º CPU fallback
            try:
                loop = asyncio.get_event_loop()
                await asyncio.wait_for(
                    loop.run_in_executor(
                        None,
                        self._create_chunk_cpu_fallback,
                        task['input_path'],
                        task['output_path'], 
                        task['start_time'],
                        task['duration']
                    ),
                    timeout=120.0  # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è CPU
                )
                logger.info(f"‚úÖ –ß–∞–Ω–∫ {task['index']} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ CPU fallback")
                return True
            except Exception as fallback_error:
                logger.error(f"‚ùå CPU fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —á–∞–Ω–∫–∞ {task['index']}: {fallback_error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            logger.error(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞–Ω–∫–∞: start={task['start_time']}, duration={task['duration']}, output={task['output_path']}")
            return False
    
    def _create_chunk_direct_command(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ffmpeg —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        gpu_available = self._check_gpu_support()
        
        if gpu_available:
            # GPU —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (NVIDIA)
            cmd = [
                'ffmpeg',
                '-hwaccel', 'cuda',           # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ CUDA
                '-hwaccel_output_format', 'cuda',  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç CUDA
                '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                '-c:v', 'h264_nvenc',         # GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ NVIDIA
                '-c:a', 'copy',               # –ê—É–¥–∏–æ –∫–æ–ø–∏—Ä—É–µ–º
                '-preset', 'p1',              # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è NVENC
                '-tune', 'hq',                # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                '-rc', 'vbr',                 # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                '-cq', '20',                  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è Tesla T4
                '-b:v', '8M',                 # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è Tesla T4
                '-maxrate', '12M',            # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                '-bufsize', '16M',            # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è Tesla T4
                '-gpu', '0',                  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π GPU
                '-threads', '0',              # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
                '-bf', '3',                   # B-–∫–∞–¥—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
                '-refs', '3'                  # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∫–∞–¥—Ä—ã
                '-avoid_negative_ts', 'make_zero',
                '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
                output_path
            ]
            logger.info(f"üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ —á–∞–Ω–∫–∞")
        else:
            # –û–±—ã—á–Ω–∞—è CPU –∫–æ–º–∞–Ω–¥–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            cmd = [
                'ffmpeg',
                '-ss', str(start_time),        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                '-i', input_path,              # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-t', str(duration),           # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                '-c', 'copy',                  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                '-avoid_negative_ts', 'make_zero',
                '-y',                          # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
                output_path
            ]
            logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ —á–∞–Ω–∫–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True,
            encoding='utf-8',  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8
            errors='ignore',   # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            check=False        # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            # –ï—Å–ª–∏ GPU –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º CPU
            if gpu_available:
                logger.warning("GPU –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º CPU...")
                return self._create_chunk_cpu_fallback(input_path, output_path, start_time, duration)
            else:
                raise Exception(f"ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
    
    def _check_gpu_support(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–ª—è ffmpeg"""
        try:
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NVIDIA GPU
            result = subprocess.run(
                ['nvidia-smi'], 
                capture_output=True, 
                text=True, 
                encoding='utf-8',
                errors='ignore',
                check=False
            )
            if result.returncode != 0:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É NVENC –≤ ffmpeg
            result = subprocess.run(
                ['ffmpeg', '-encoders'], 
                capture_output=True, 
                text=True,
                encoding='utf-8',
                errors='ignore',
                check=False
            )
            if 'h264_nvenc' in result.stdout:
                logger.info("‚úÖ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (NVENC) –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            else:
                logger.info("‚ùå GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (NVENC) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
            return False
    
    def _create_chunk_cpu_fallback(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è CPU –∫–æ–º–∞–Ω–¥–∞ –µ—Å–ª–∏ GPU –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        import subprocess
        
        cmd = [
            'ffmpeg',
            '-ss', str(start_time),
            '-i', input_path,
            '-t', str(duration),
            '-c', 'copy',
            '-avoid_negative_ts', 'make_zero',
            '-y',
            output_path
        ]
        
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            errors='ignore',
            check=False
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ CPU fallback: {result.stderr}")
            raise Exception(f"CPU fallback –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
    
    async def _create_chunk_fast(self, task: dict) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ python-ffmpeg)"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_chunk_sync_fast,
                task['input_path'],
                task['output_path'], 
                task['start_time'],
                task['duration']
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            return False
    
    def _create_chunk_sync_fast(self, input_path: str, output_path: str, start_time: float, duration: float):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ —Å stream copy
        (
            ffmpeg
            .input(input_path, 
                   ss=start_time,           # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                   t=duration,              # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                   copyts=True)             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            .output(output_path, 
                   vcodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   acodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   avoid_negative_ts='make_zero',  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
                   map_metadata=0,          # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                   movflags='faststart')    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            .overwrite_output()
            .run(quiet=True, capture_stdout=True, capture_stderr=True)
        )
    
    async def create_links_file(self, upload_results: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        try:
            links_file = self.output_dir / "video_links.txt"
            
            with open(links_file, 'w', encoding='utf-8') as f:
                f.write("üé¨ –°–°–´–õ–ö–ò –ù–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ï –®–û–¢–°–û–í\n")
                f.write("=" * 50 + "\n\n")
                
                for i, result in enumerate(upload_results, 1):
                    if result['success']:
                        f.write(f"–§—Ä–∞–≥–º–µ–Ω—Ç {i:03d}: {result['download_url']}\n")
                
                f.write(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(upload_results)} —à–æ—Ç—Å–æ–≤\n")
                f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {sum(1 for r in upload_results if r['success'])}\n")
            
            return str(links_file)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return None
    
    def cleanup_successful_files(self, clip_paths: list, upload_results: list):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            for i, clip_path in enumerate(clip_paths):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–ª–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                    if i < len(upload_results) and upload_results[i].get('success', False):
                        if os.path.exists(clip_path):
                            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                            for attempt in range(5):  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
                                try:
                                    os.remove(clip_path)
                                    logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {clip_path}")
                                    break
                                except PermissionError:
                                    if attempt < 4:
                                        time.sleep(1)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                                        continue
                                    else:
                                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                    else:
                        logger.info(f"–§–∞–π–ª {clip_path} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file() and not file.name.startswith('clip_'):
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def cleanup_temp_files(self, clip_paths: list):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(1)
            
            for clip_path in clip_paths:
                try:
                    if os.path.exists(clip_path):
                        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                        for attempt in range(3):
                            try:
                                os.remove(clip_path)
                                break
                            except PermissionError:
                                if attempt < 2:
                                    time.sleep(0.5)
                                    continue
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file():
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")