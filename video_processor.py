import os
import asyncio
import logging
import ffmpeg
from pathlib import Path
from youtube_downloader import YouTubeDownloader
from video_editor import VideoEditor
from subtitle_generator import SubtitleGenerator
from google_drive_uploader import GoogleDriveUploader

logger = logging.getLogger(__name__)

class VideoProcessor:
    def __init__(self):
        self.youtube_downloader = YouTubeDownloader()
        self.video_editor = VideoEditor()
        self.subtitle_generator = SubtitleGenerator()
        self.drive_uploader = GoogleDriveUploader()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.temp_dir = Path("temp")
        self.output_dir = Path("output")
        self.temp_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
    
    async def process_youtube_video(self, url: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –≤–∏–¥–µ–æ"""
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ: {url}")
            download_result = await self.youtube_downloader.download_with_cookies(url)
            
            if not download_result['success']:
                return {'success': False, 'error': download_result['error']}
            
            video_path = download_result['video_path']
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.process_video_file(video_path, config)
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            if os.path.exists(video_path):
                os.remove(video_path)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def process_video_file(self, video_path: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            duration = config.get('duration', 30)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = self.video_editor.get_video_info(video_path)
            total_duration = video_info['duration']
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {total_duration} —Å–µ–∫—É–Ω–¥")
            
            # 2. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            chunks = []
            if total_duration > 300:  # 5 –º–∏–Ω—É—Ç
                chunks = await self.split_into_chunks(video_path, chunk_duration=300)
            else:
                chunks = [video_path]
            
            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
            all_clips = []
            for i, chunk_path in enumerate(chunks):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{len(chunks)}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —á–∞–Ω–∫–∞
                subtitles = await self.subtitle_generator.generate(chunk_path)
                
                # –ù–∞—Ä–µ–∑–∞–µ–º —á–∞–Ω–∫ –Ω–∞ –∫–ª–∏–ø—ã
                clips = await self.video_editor.create_clips(
                    chunk_path, 
                    duration, 
                    subtitles,
                    start_index=len(all_clips),
                    config=config
                )
                
                all_clips.extend(clips)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞–Ω–∫ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
                if chunk_path != video_path and os.path.exists(chunk_path):
                    os.remove(chunk_path)
            
            # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            import time
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤...")
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            
            # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–ª–∏–ø—ã –Ω–∞ Google Drive
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(all_clips)} –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive")
            upload_results = await self.drive_uploader.upload_clips(all_clips)
            
            # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            links_file = await self.create_links_file(upload_results)
            
            # 6. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            successful_uploads = sum(1 for r in upload_results if r.get('success', False))
            if successful_uploads > 0:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful_uploads}/{len(all_clips)} –∫–ª–∏–ø–æ–≤, –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã")
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.cleanup_successful_files(all_clips, upload_results)
            else:
                logger.warning("–ù–∏ –æ–¥–∏–Ω –∫–ª–∏–ø –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
            
            return {
                'success': True,
                'total_clips': len(all_clips),
                'links_file': links_file,
                'upload_results': upload_results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def split_into_chunks(self, video_path: str, chunk_duration: int = 300) -> list:
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ + –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å)"""
        try:
            video_info = self.video_editor.get_video_info(video_path)
            total_duration = int(video_info['duration'])
            
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—Ç–∫–æ–µ - –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            if total_duration <= chunk_duration:
                logger.info(f"–í–∏–¥–µ–æ {total_duration} —Å–µ–∫ <= {chunk_duration} —Å–µ–∫, –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏")
                return [video_path]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            import math
            num_chunks = math.ceil(total_duration / chunk_duration)
            logger.info(f"–î–µ–ª–∏–º –≤–∏–¥–µ–æ {total_duration} —Å–µ–∫ –Ω–∞ {num_chunks} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_duration} —Å–µ–∫")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chunk_tasks = []
            chunk_paths = []
            
            for i in range(num_chunks):
                start_time = i * chunk_duration
                actual_duration = min(chunk_duration, total_duration - start_time)
                chunk_path = self.temp_dir / f"chunk_{i}.mp4"
                
                chunk_tasks.append({
                    'input_path': video_path,
                    'output_path': str(chunk_path),
                    'start_time': start_time,
                    'duration': actual_duration,
                    'index': i
                })
                chunk_paths.append(str(chunk_path))
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –°–£–ü–ï–† –ë–´–°–¢–†–£–Æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –Ω–∞—Ä–µ–∑–∫—É {len(chunk_tasks)} —á–∞–Ω–∫–æ–≤...")
            
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ ffmpeg
            tasks = [
                self._create_chunk_ultra_fast(task) 
                for task in chunk_tasks
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_chunks = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {result}")
                elif result:
                    successful_chunks.append(chunk_paths[i])
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1}/{num_chunks} –≥–æ—Ç–æ–≤: {chunk_tasks[i]['duration']} —Å–µ–∫")
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫ {i}")
            
            logger.info(f"üöÄ –°–£–ü–ï–† –ë–´–°–¢–†–û —Å–æ–∑–¥–∞–Ω–æ {len(successful_chunks)}/{num_chunks} —á–∞–Ω–∫–æ–≤")
            return successful_chunks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏: {e}")
            return [video_path]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    
    async def _create_chunk_ultra_fast(self, task: dict) -> bool:
        """–°–£–ü–ï–† –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ –ø—Ä—è–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ ffmpeg (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_chunk_direct_command,
                task['input_path'],
                task['output_path'], 
                task['start_time'],
                task['duration']
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            return False
    
    def _create_chunk_direct_command(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)"""
        import subprocess
        
        # –ö–æ–º–∞–Ω–¥–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        cmd = [
            'ffmpeg',
            '-ss', str(start_time),        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            '-i', input_path,              # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-t', str(duration),           # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            '-c', 'copy',                  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–´–°–¢–†–û!)
            '-avoid_negative_ts', 'make_zero',  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
            '-y',                          # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            output_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True,
            check=False  # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception(f"ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
    
    async def _create_chunk_fast(self, task: dict) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ python-ffmpeg)"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_chunk_sync_fast,
                task['input_path'],
                task['output_path'], 
                task['start_time'],
                task['duration']
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            return False
    
    def _create_chunk_sync_fast(self, input_path: str, output_path: str, start_time: float, duration: float):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ —Å stream copy
        (
            ffmpeg
            .input(input_path, 
                   ss=start_time,           # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                   t=duration,              # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                   copyts=True)             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            .output(output_path, 
                   vcodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   acodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   avoid_negative_ts='make_zero',  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
                   map_metadata=0,          # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                   movflags='faststart')    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            .overwrite_output()
            .run(quiet=True, capture_stdout=True, capture_stderr=True)
        )
    
    async def create_links_file(self, upload_results: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        try:
            links_file = self.output_dir / "video_links.txt"
            
            with open(links_file, 'w', encoding='utf-8') as f:
                f.write("üé¨ –°–°–´–õ–ö–ò –ù–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ï –®–û–¢–°–û–í\n")
                f.write("=" * 50 + "\n\n")
                
                for i, result in enumerate(upload_results, 1):
                    if result['success']:
                        f.write(f"–§—Ä–∞–≥–º–µ–Ω—Ç {i:03d}: {result['download_url']}\n")
                
                f.write(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(upload_results)} —à–æ—Ç—Å–æ–≤\n")
                f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {sum(1 for r in upload_results if r['success'])}\n")
            
            return str(links_file)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return None
    
    def cleanup_successful_files(self, clip_paths: list, upload_results: list):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            for i, clip_path in enumerate(clip_paths):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–ª–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                    if i < len(upload_results) and upload_results[i].get('success', False):
                        if os.path.exists(clip_path):
                            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                            for attempt in range(5):  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
                                try:
                                    os.remove(clip_path)
                                    logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {clip_path}")
                                    break
                                except PermissionError:
                                    if attempt < 4:
                                        time.sleep(1)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                                        continue
                                    else:
                                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                    else:
                        logger.info(f"–§–∞–π–ª {clip_path} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file() and not file.name.startswith('clip_'):
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def cleanup_temp_files(self, clip_paths: list):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(1)
            
            for clip_path in clip_paths:
                try:
                    if os.path.exists(clip_path):
                        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                        for attempt in range(3):
                            try:
                                os.remove(clip_path)
                                break
                            except PermissionError:
                                if attempt < 2:
                                    time.sleep(0.5)
                                    continue
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file():
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")