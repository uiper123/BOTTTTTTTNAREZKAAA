import os
import asyncio
import subprocess
import tempfile
import shutil
from pathlib import Path
import concurrent.futures
from multiprocessing import cpu_count
import yt_dlp
import whisper
import torch
from google_drive_uploader import GoogleDriveUploader
from video_editor import VideoEditor
import math

class VideoProcessor:
    def __init__(self):
        self.drive_uploader = GoogleDriveUploader()
        self.video_editor = VideoEditor()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Colab
        self.max_workers = min(cpu_count(), 8)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 –ø–æ—Ç–æ–∫–æ–≤
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper –º–æ–¥–µ–ª—å –Ω–∞ GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        print(f"–ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {self.max_workers}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å –¥–ª—è Colab
        model_size = "small" if self.device == "cuda" else "tiny"
        self.whisper_model = whisper.load_model(model_size, device=self.device)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ Whisper –º–æ–¥–µ–ª—å: {model_size}")
        
    async def process_video(self, video_path, duration, title, subtitle, user_id):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        temp_dir = f"temp_{user_id}"
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            os.makedirs(temp_dir, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = self._get_video_info(video_path)
            video_duration = video_info['duration']
            
            print(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {video_duration:.1f} —Å–µ–∫—É–Ω–¥")
            
            # –£–º–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏
            chunks = []
            MIN_CHUNKABLE_DURATION = 45 # –ù–µ –Ω–∞—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ 45 —Å–µ–∫—É–Ω–¥
            
            if video_duration > MIN_CHUNKABLE_DURATION:
                chunks = await self._split_video_to_chunks_parallel(video_path, temp_dir, 180) # –ß–∞–Ω–∫–∏ –ø–æ 3 –º–∏–Ω—É—Ç—ã
            else:
                chunks = [video_path] # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω —á–∞–Ω–∫
            
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
            all_clips = []
            chunk_tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
            for i, chunk_path in enumerate(chunks):
                task = self._process_chunk_parallel(chunk_path, duration, title, subtitle, temp_dir, i)
                chunk_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(chunk_tasks)} —á–∞–Ω–∫–æ–≤...")
            chunk_results = await asyncio.gather(*chunk_tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(chunk_results):
                if isinstance(result, Exception):
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i}: {result}")
                else:
                    all_clips.extend(result)
                    print(f"‚úÖ –ß–∞–Ω–∫ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(result)} –∫–ª–∏–ø–æ–≤")
            
            print(f"üéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {len(all_clips)} –∫–ª–∏–ø–æ–≤")
            
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive
            uploaded_links_file = await self._upload_clips_to_drive_parallel(all_clips)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            links_file = await self._create_links_file(uploaded_links_file, user_id)
            
            return {
                'success': True, 
                'clips_count': len(all_clips), 
                'links_file': links_file
            }
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_video: {e}")
            import traceback
            traceback.print_exc()
            return {'success': False, 'error': str(e)}
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir, ignore_errors=True)
                print(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
    
    async def process_youtube_video(self, url, duration, title, subtitle, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å YouTube"""
        downloaded_video_path = None
        try:
            print("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube...")
            downloaded_video_path = await self._download_youtube_video(url, user_id)
            print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {downloaded_video_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            return await self.process_video(
                downloaded_video_path, duration, title, subtitle, user_id
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YouTube –≤–∏–¥–µ–æ: {e}")
            import traceback
            traceback.print_exc()
            return {'success': False, 'error': str(e)}
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            if downloaded_video_path and os.path.exists(downloaded_video_path):
                os.remove(downloaded_video_path)
                print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª: {downloaded_video_path}")
    
    async def _download_youtube_video(self, url, user_id):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ fallback'–æ–º"""
        output_template = f"youtube_video_{user_id}.%(ext)s"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
            'outtmpl': output_template,
            'cookiefile': 'cookies.txt' if os.path.exists('cookies.txt') else None,
            'quiet': True, # –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –≤ –ª–æ–≥–∞—Ö
            'no_warnings': True,
        }
        
        downloaded_filepath = None
        
        try:
            print("–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ (mp4)...")
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                downloaded_filepath = ydl.prepare_filename(info)

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            print("–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –ª—é–±–æ–º –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ (fallback)...")
            ydl_opts['format'] = 'best' # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    downloaded_filepath = ydl.prepare_filename(info)
            except Exception as fallback_e:
                print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {fallback_e}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ cookies.") from fallback_e

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not downloaded_filepath or not os.path.exists(downloaded_filepath):
            raise Exception(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, –Ω–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. YouTube –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (403 Forbidden).")
            
        print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {downloaded_filepath}")
        return downloaded_filepath
    
    def _get_video_info(self, video_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        if not os.path.exists(video_path):
            raise Exception(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json',
            '-show_format', '-show_streams', video_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ ffprobe: {result.stderr}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {result.stderr}")
        
        import json
        try:
            info = json.loads(result.stdout)
            duration = float(info['format']['duration'])
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration} —Å–µ–∫—É–Ω–¥")
            return {'duration': duration}
        except (json.JSONDecodeError, KeyError, ValueError) as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
    
    async def _split_video_to_chunks_parallel(self, video_path, temp_dir, chunk_duration):
        """–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø —Ä–∞–∑–±–∏–≤–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏"""
        video_info = self._get_video_info(video_path)
        total_duration = video_info['duration']
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏
        chunk_count = math.ceil(total_duration / chunk_duration)
        
        print(f"‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ {chunk_count} —á–∞–Ω–∫–æ–≤ –ø–æ ~{chunk_duration} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
        chunk_tasks = []
        for i in range(chunk_count):
            start_time = i * chunk_duration
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ
            current_chunk_duration = min(chunk_duration, total_duration - start_time)
            chunk_path = os.path.join(temp_dir, f"chunk_{i}.mp4")
            
            if current_chunk_duration <= 0: continue

            task = self._create_chunk_async(video_path, chunk_path, start_time, current_chunk_duration, i, chunk_count)
            chunk_tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        chunk_results = await asyncio.gather(*chunk_tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —á–∞–Ω–∫–∏
        chunks = []
        for i, result in enumerate(chunk_results):
            if isinstance(result, Exception):
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {result}")
            elif result:
                chunks.append(result)
                print(f"‚úÖ –ß–∞–Ω–∫ {i+1} —Å–æ–∑–¥–∞–Ω")
        
        print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        return chunks
    
    async def _create_chunk_async(self, video_path, chunk_path, start_time, duration, index, total):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞"""
        loop = asyncio.get_event_loop()
        
        def create_chunk():
            cmd = [
                'ffmpeg', '-i', video_path,
                '-ss', str(start_time),
                '-t', str(duration),
                '-c', 'copy',
                chunk_path, '-y',
                '-loglevel', 'error'  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(chunk_path) and os.path.getsize(chunk_path) > 0:
                return chunk_path
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {index+1}: {result.stderr}")
                return None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            result = await loop.run_in_executor(executor, create_chunk)
            return result
    
    async def _process_chunk_parallel(self, chunk_path, duration, title, subtitle, temp_dir, chunk_index):
        """–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞"""
        try:
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {chunk_index+1}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            subtitles_task = self._generate_subtitles_async(chunk_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = self._get_video_info(chunk_path)
            total_duration = video_info['duration']
            
            # –ñ–¥–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
            subtitles = await subtitles_task
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            clips = await self._create_clips_parallel(
                chunk_path, duration, title, subtitle, subtitles, temp_dir, chunk_index, total_duration
            )
            
            return clips
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {chunk_index}: {e}")
            return []
    
    async def _generate_subtitles_async(self, video_path):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        loop = asyncio.get_event_loop()
        
        def generate():
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fp16 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ GPU
                result = self.whisper_model.transcribe(
                    video_path,
                    fp16=self.device == "cuda",
                    language="ru"  # –£–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                )
                return result['segments']
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
                return []
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è GPU –æ–ø–µ—Ä–∞—Ü–∏–π
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            result = await loop.run_in_executor(executor, generate)
            return result
    
    async def _create_clips_parallel(self, video_path, duration, title, subtitle, subtitles, temp_dir, chunk_index, total_duration):
        """–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ —á–∞–Ω–∫–∞"""
        clips = []
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
            if total_duration <= duration:
                clip_count = 1
                actual_duration = total_duration
            else:
                clip_count = int(total_duration // duration)
                actual_duration = duration
            
            print(f"üé¨ –°–æ–∑–¥–∞–µ–º {clip_count} –∫–ª–∏–ø–æ–≤ –∏–∑ —á–∞–Ω–∫–∞ {chunk_index+1}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤
            clip_tasks = []
            for i in range(clip_count):
                start_time = i * duration
                clip_path = os.path.join(temp_dir, f"clip_{chunk_index}_{i}.mp4")
                
                clip_duration = actual_duration if total_duration <= duration else duration
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
                clip_subtitles = [
                    seg for seg in subtitles 
                    if seg['start'] >= start_time and seg['end'] <= start_time + clip_duration
                ]
                
                task = self._create_single_clip_async(
                    video_path, clip_path, start_time, clip_duration,
                    title, subtitle, clip_subtitles, i, clip_count
                )
                clip_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–ª–∏–ø—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á)
            batch_size = min(4, self.max_workers)  # –ù–µ –±–æ–ª–µ–µ 4 –∫–ª–∏–ø–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            
            for i in range(0, len(clip_tasks), batch_size):
                batch = clip_tasks[i:i + batch_size]
                batch_results = await asyncio.gather(*batch, return_exceptions=True)
                
                for j, result in enumerate(batch_results):
                    if isinstance(result, Exception):
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+j+1}: {result}")
                    elif result:
                        clips.append(result)
                        print(f"‚úÖ –ö–ª–∏–ø {i+j+1} —Å–æ–∑–¥–∞–Ω")
            
            print(f"üéØ –ß–∞–Ω–∫ {chunk_index+1}: —Å–æ–∑–¥–∞–Ω–æ {len(clips)} –∫–ª–∏–ø–æ–≤")
            return clips
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ _create_clips_parallel: {e}")
            return clips
    
    async def _create_single_clip_async(self, video_path, clip_path, start_time, duration, title, subtitle, subtitles, clip_index, total_clips):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
        loop = asyncio.get_event_loop()
        
        def create_clip():
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º video_editor –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞.
                # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ–µ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                success = self.video_editor.create_clip(
                    video_path, clip_path, start_time, duration,
                    title, subtitle, subtitles
                )
                return clip_path if success else None
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {clip_index+1}: {e}")
                return None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            result = await loop.run_in_executor(executor, create_clip)
            return result
    
    async def _generate_subtitles(self, video_path):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é Whisper"""
        try:
            result = self.whisper_model.transcribe(video_path)
            return result['segments']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return []
    
    async def _create_clips(self, video_path, duration, title, subtitle, subtitles, temp_dir, chunk_index):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ"""
        clips = []
        
        try:
            video_info = self._get_video_info(video_path)
            total_duration = video_info['duration']
            
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {total_duration} —Å–µ–∫—É–Ω–¥")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞: {duration} —Å–µ–∫—É–Ω–¥")
            
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –∫–ª–∏–ø –∏–∑ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
            if total_duration <= duration:
                print(f"–í–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ {duration} —Å–µ–∫—É–Ω–¥, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –∫–ª–∏–ø –∏–∑ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ")
                clip_count = 1
                actual_duration = total_duration
            else:
                clip_count = int(total_duration // duration)
                actual_duration = duration
                
            print(f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {clip_count} –∫–ª–∏–ø–æ–≤")
            
            for i in range(clip_count):
                start_time = i * duration
                clip_path = os.path.join(temp_dir, f"clip_{chunk_index}_{i}.mp4")
                
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                clip_duration = actual_duration if total_duration <= duration else duration
                
                print(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø {i+1}/{clip_count}, –Ω–∞—á–∞–ª–æ: {start_time}—Å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {clip_duration}—Å")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
                clip_subtitles = [
                    seg for seg in subtitles 
                    if seg['start'] >= start_time and seg['end'] <= start_time + clip_duration
                ]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
                success = await self.video_editor.create_clip(
                    video_path, clip_path, start_time, clip_duration,
                    title, subtitle, clip_subtitles
                )
                
                if success:
                    clips.append(clip_path)
                    print(f"–ö–ª–∏–ø {i+1} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+1}")
            
            print(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {len(clips)}")
            return clips
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ _create_clips: {e}")
            return clips
    
    async def _upload_clips_to_drive_parallel(self, clips):
        """–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive"""
        print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É {len(clips)} –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        upload_tasks = []
        for i, clip_path in enumerate(clips):
            task = self._upload_single_clip_async(clip_path, i + 1)
            upload_tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞—Ç—á–∞–º–∏ (–Ω–µ –±–æ–ª–µ–µ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        batch_size = 3
        uploaded_links = []
        
        for i in range(0, len(upload_tasks), batch_size):
            batch = upload_tasks[i:i + batch_size]
            print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á {i//batch_size + 1}/{(len(upload_tasks) + batch_size - 1)//batch_size}")
            
            batch_results = await asyncio.gather(*batch, return_exceptions=True)
            
            for j, result in enumerate(batch_results):
                if isinstance(result, Exception):
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–ø–∞ {i+j+1}: {result}")
                elif result:
                    uploaded_links.append(result)
                    print(f"‚úÖ –ö–ª–∏–ø {i+j+1} –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_links)} –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive")
        return uploaded_links
    
    async def _upload_single_clip_async(self, clip_path, fragment_number):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
        loop = asyncio.get_event_loop()
        
        def upload_clip():
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                link = self.drive_uploader.upload_file(clip_path, f"clip_{fragment_number}.mp4")
                return {
                    'fragment': fragment_number,
                    'link': link
                }
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–ø–∞ {fragment_number}: {e}")
                return None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
            result = await loop.run_in_executor(executor, upload_clip)
            return result
    
    async def _upload_clips_to_drive(self, clips):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        uploaded_links = []
        
        for i, clip_path in enumerate(clips):
            try:
                link = await self.drive_uploader.upload_file(clip_path, f"clip_{i+1}.mp4")
                uploaded_links.append({
                    'fragment': i + 1,
                    'link': link
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–ø–∞ {clip_path}: {e}")
        
        return uploaded_links
    
    async def _create_links_file(self, uploaded_links, user_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        links_content = "–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤:\n\n"
        
        for item in uploaded_links:
            links_content += f"–§—Ä–∞–≥–º–µ–Ω—Ç {item['fragment']}: {item['link']}\n"
        
        links_file_path = f"links_{user_id}.txt"
        with open(links_file_path, 'w', encoding='utf-8') as f:
            f.write(links_content)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Drive
        links_file_url = await self.drive_uploader.upload_file(
            links_file_path, f"links_{user_id}.txt"
        )
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.remove(links_file_path)
        
        return links_file_url