#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
"""

import asyncio
import os
from video_editor import VideoEditor

async def test_subtitle_sync():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
    test_subtitles = [
        {'start': 5.0, 'end': 8.0, 'text': '–ü–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞ –≤ –Ω–∞—á–∞–ª–µ'},
        {'start': 12.0, 'end': 15.0, 'text': '–í—Ç–æ—Ä–∞—è —Ñ—Ä–∞–∑–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ'},
        {'start': 25.0, 'end': 28.0, 'text': '–¢—Ä–µ—Ç—å—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ'},
        {'start': 35.0, 'end': 38.0, 'text': '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Ñ—Ä–∞–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–ø–∞'}
    ]
    
    print("üß™ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–£–ë–¢–ò–¢–†–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {"name": "–ö–ª–∏–ø —Å –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ", "start_offset": 0, "duration": 30},
        {"name": "–ö–ª–∏–ø –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã", "start_offset": 10, "duration": 30}, 
        {"name": "–ö–ª–∏–ø —Å –∫–æ–Ω—Ü–∞", "start_offset": 20, "duration": 30}
    ]
    
    editor = VideoEditor()
    
    for case in test_cases:
        print(f"\nüìã {case['name']}")
        print(f"   –°–º–µ—â–µ–Ω–∏–µ: {case['start_offset']}s, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {case['duration']}s")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        start_offset = case['start_offset']
        duration = case['duration']
        end_offset = start_offset + duration
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∫–ª–∏–ø–æ–º
        clip_subtitles = []
        for seg in test_subtitles:
            if seg['end'] > start_offset and seg['start'] < end_offset:
                clip_subtitles.append(seg)
        
        print(f"   üìù –ù–∞–π–¥–µ–Ω–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(clip_subtitles)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã
        for i, segment in enumerate(clip_subtitles):
            original_start = segment['start']
            original_end = segment['end']
            
            # –í—Ä–µ–º—è –≤ –∫–ª–∏–ø–µ = –≤—Ä–µ–º—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ - —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
            clip_start = original_start - start_offset
            clip_end = original_end - start_offset
            
            print(f"      {i+1}. '{segment['text']}'")
            print(f"         –û—Ä–∏–≥–∏–Ω–∞–ª: {original_start:.1f}-{original_end:.1f}s")
            print(f"         –í –∫–ª–∏–ø–µ:  {clip_start:.1f}-{clip_end:.1f}s")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            if clip_start < 0:
                print(f"         ‚úÇÔ∏è –ù–∞—á–∞–ª–æ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ 0s")
            if clip_end > duration:
                print(f"         ‚úÇÔ∏è –ö–æ–Ω–µ—Ü –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ {duration}s")
            if clip_end <= 0 or clip_start >= duration:
                print(f"         ‚ùå –°—É–±—Ç–∏—Ç—Ä –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–ª–∏–ø")

if __name__ == '__main__':
    asyncio.run(test_subtitle_sync())