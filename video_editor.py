import os
import asyncio
import logging
import ffmpeg
import json
from pathlib import Path

logger = logging.getLogger(__name__)

class VideoEditor:
    def __init__(self):
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.font_path = "Obelix Pro.ttf"  # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
        self.title_color = "red"
        self.subtitle_color = "red"
    
    def get_video_info(self, video_path: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        try:
            probe = ffmpeg.probe(video_path)
            video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
            
            if not video_stream:
                raise ValueError("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            duration = float(probe['format']['duration'])
            width = int(video_stream['width'])
            height = int(video_stream['height'])
            fps = eval(video_stream['r_frame_rate'])
            
            return {
                'duration': duration,
                'width': width,
                'height': height,
                'fps': fps
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            raise
    
    async def extract_segment(self, input_path: str, output_path: str, start_time: float, duration: float) -> bool:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._extract_segment_sync,
                input_path, output_path, start_time, duration
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def _extract_segment_sync(self, input_path: str, output_path: str, start_time: float, duration: float):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞"""
        (
            ffmpeg
            .input(input_path, ss=start_time, t=duration)
            .output(output_path, vcodec='libx264', acodec='aac')
            .overwrite_output()
            .run(quiet=True)
        )
    
    async def create_clips(self, video_path: str, clip_duration: int, subtitles: list, start_index: int = 0, config: dict = None) -> list:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ —Å–æ —Å—Ç—Ä–æ–≥–∏–º —Ç–∞–π–º–ª–∞–π–Ω–æ–º"""
        try:
            video_info = self.get_video_info(video_path)
            total_duration = video_info['duration']
            
            clips = []
            current_time = 0
            clip_index = start_index
            skipped_clips = 0
            
            while current_time < total_duration:
                end_time = current_time + clip_duration
                
                # –°–¢–†–û–ì–ò–ô –¢–ê–ô–ú–õ–ê–ô–ù: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–∏–ø–∞
                remaining_time = total_duration - current_time
                
                if remaining_time < clip_duration:
                    # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫: {remaining_time:.1f} —Å–µ–∫ < {clip_duration} —Å–µ–∫ (—Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω)")
                    skipped_clips += 1
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–µ –º–µ–Ω–µ–µ 95% –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π)
                min_duration = clip_duration * 0.95
                actual_duration = min(clip_duration, remaining_time)
                
                if actual_duration < min_duration:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –∫—É—Å–æ–∫ {clip_index + 1}: {actual_duration:.1f} —Å–µ–∫ < {min_duration:.1f} —Å–µ–∫ (—Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω)")
                    skipped_clips += 1
                    current_time += clip_duration
                    continue
                
                clip_path = self.output_dir / f"clip_{clip_index:03d}.mp4"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø —Å —Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                success = await self.create_styled_clip(
                    video_path,
                    str(clip_path),
                    current_time,
                    clip_duration,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    subtitles,
                    clip_index + 1,
                    config
                )
                
                if success:
                    clips.append(str(clip_path))
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∫–ª–∏–ø {clip_index + 1}: {current_time:.1f}-{current_time + clip_duration:.1f} —Å–µ–∫ ({clip_duration} —Å–µ–∫)")
                    clip_index += 1
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø {clip_index + 1}")
                
                current_time += clip_duration
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(clips)} –∫–ª–∏–ø–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_clips} (—Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω)")
            return clips
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: {e}")
            return []
    
    async def create_styled_clip(self, input_path: str, output_path: str, start_time: float, 
                               duration: float, subtitles: list, clip_number: int, config: dict = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_styled_clip_sync,
                input_path, output_path, start_time, duration, subtitles, clip_number, config
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞: {e}")
            return False
    
    def _create_styled_clip_sync(self, input_path: str, output_path: str, start_time: float,
                               duration: float, subtitles: list, clip_number: int, config: dict = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞ —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        gpu_available = self._check_gpu_support()
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –≤–≤–æ–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Colab
        main_video = ffmpeg.input(input_path, ss=start_time, t=duration)
        logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {clip_number}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
        blurred_bg = (
            main_video
            .video
            .filter('scale', 1080, 1920)  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            .filter('gblur', sigma=20)
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
        video_info = self.get_video_info(input_path)
        original_width = video_info['width']
        original_height = video_info['height']
        
        # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (9:16)
        target_screen_width = 1080
        target_screen_height = 1920
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ë–û–õ–¨–®–ò–• –í–ò–î–ï–û
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–∏–¥–µ–æ (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
        text_area_height = 520  # –ú–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        available_width = target_screen_width
        available_height = target_screen_height - text_area_height
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        original_aspect = original_width / original_height
        available_aspect = available_width / available_height
        
        # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ (4K+) –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        is_large_video = original_width >= 2160 or original_height >= 2160
        
        if is_large_video:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ: {original_width}x{original_height}")
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            if original_aspect > available_aspect:
                # –®–∏—Ä–æ–∫–æ–µ –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É
                target_width = available_width
                target_height = int(available_width / original_aspect)
                # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                if target_height < available_height * 0.6:
                    target_height = int(available_height * 0.8)
                    target_width = int(target_height * original_aspect)
            else:
                # –í—ã—Å–æ–∫–æ–µ –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã
                target_height = int(available_height * 0.9)
                target_width = int(target_height * original_aspect)
                # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if target_width > available_width:
                    target_width = available_width
                    target_height = int(available_width / original_aspect)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            if original_aspect > available_aspect:
                target_width = available_width
                target_height = int(available_width / original_aspect)
            else:
                target_height = available_height
                target_width = int(available_height * original_aspect)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ç–Ω—ã–µ –∏ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        target_width = min(target_width, available_width)
        target_height = min(target_height, available_height)
        target_width = target_width - (target_width % 2)
        target_height = target_height - (target_height % 2)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        min_width = 640   # –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        min_height = 360  # –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
        
        if target_width < min_width or target_height < min_height:
            logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞")
            if original_aspect > 1:  # –®–∏—Ä–æ–∫–æ–µ –≤–∏–¥–µ–æ
                target_width = min_width
                target_height = int(min_width / original_aspect)
                if target_height < min_height:
                    target_height = min_height
                    target_width = int(min_height * original_aspect)
            else:  # –í—ã—Å–æ–∫–æ–µ –≤–∏–¥–µ–æ
                target_height = min_height
                target_width = int(min_height * original_aspect)
                if target_width < min_width:
                    target_width = min_width
                    target_height = int(min_width / original_aspect)
            
            # –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å
            target_width = target_width - (target_width % 2)
            target_height = target_height - (target_height % 2)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if target_width <= 0 or target_height <= 0:
            logger.warning("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            target_width = 854   # –£–≤–µ–ª–∏—á–∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            target_height = 480  # 16:9 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            target_width = target_width - (target_width % 2)
            target_height = target_height - (target_height % 2)
        
        logger.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {original_width}x{original_height} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {original_aspect:.2f})")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: {available_width}x{available_height} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {available_aspect:.2f})")
        
        if original_aspect > available_aspect:
            logger.info("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ (–≤–∏–¥–µ–æ —à–∏—Ä–æ–∫–æ–µ)")
        else:
            logger.info("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ (–≤–∏–¥–µ–æ –≤—ã—Å–æ–∫–æ–µ)")
            
        logger.info(f"–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {original_width}x{original_height} -> {target_width}x{target_height}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
        if is_large_video:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            main_scaled = (
                main_video
                .video
                .filter('scale', target_width, target_height, 
                       flags='lanczos')  # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            )
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Lanczos –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            main_scaled = (
                main_video
                .video
                .filter('scale', target_width, target_height)
            )
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
        video_with_bg = ffmpeg.filter([blurred_bg, main_scaled], 'overlay', 
                                    x='(W-w)/2', y='(H-h)/2')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ config
        if config:
            title_template = config.get('title', '–§–†–ê–ì–ú–ï–ù–¢')
            subtitle_template = config.get('subtitle', '–ß–∞—Å—Ç—å')
            custom_title = config.get('custom_title', False)
            custom_subtitle = config.get('custom_subtitle', False)
        else:
            title_template = '–§–†–ê–ì–ú–ï–ù–¢'
            subtitle_template = '–ß–∞—Å—Ç—å'
            custom_title = False
            custom_subtitle = False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if custom_title:
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
            title_text = title_template
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–ø–∞
            title_text = f"{title_template} {clip_number}"
            
        if custom_subtitle:
            # –ï—Å–ª–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
            subtitle_text = subtitle_template
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–ø–∞
            subtitle_text = f"{subtitle_template} {clip_number}"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–≤–µ—Ä—Ö—É)
        video_with_title = video_with_bg.drawtext(
            text=title_text,
            fontfile=self.font_path if os.path.exists(self.font_path) else None,
            fontsize=60,
            fontcolor=self.title_color,
            x='(w-text_w)/2',
            y='100',
            enable=f'between(t,0,{duration})'
        )
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
        video_with_subtitle = video_with_title.drawtext(
            text=subtitle_text,
            fontfile=self.font_path if os.path.exists(self.font_path) else None,
            fontsize=80,  # –ë–æ–ª—å—à–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            fontcolor=self.subtitle_color,
            x='(w-text_w)/2',
            y='200',
            enable=f'between(t,0,{duration})'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        final_video = self._add_animated_subtitles(
            video_with_subtitle, 
            subtitles, 
            start_time, 
            duration
        )
        
        # –ê—É–¥–∏–æ
        audio = main_video.audio
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å GPU/CPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–æ–º
        if gpu_available:
            # GPU —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (NVIDIA NVENC)
            (
                ffmpeg
                .output(final_video, audio, output_path, 
                       vcodec='h264_nvenc',    # GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ NVIDIA
                       acodec='aac',
                       preset='fast',          # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è GPU
                       cq=18,                  # –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è NVENC (–∞–Ω–∞–ª–æ–≥ CRF)
                       pix_fmt='yuv420p',      # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                       s='1080x1920',          # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û 9:16 —Ñ–æ—Ä–º–∞—Ç
                       **{'b:v': '8M',         # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ 8 –ú–±–∏—Ç/—Å
                          'b:a': '192k',       # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ 192 –∫–±–∏—Ç/—Å
                          'maxrate': '10M',    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                          'bufsize': '16M'})   # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                .overwrite_output()
                .run(quiet=True)
            )
            logger.info(f"üéÆ –ö–ª–∏–ø {clip_number} —Å–æ–∑–¥–∞–Ω —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º")
        else:
            # CPU –≤—ã–≤–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
            if is_large_video:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                (
                    ffmpeg
                    .output(final_video, audio, output_path, 
                           vcodec='libx264',
                           acodec='aac',
                           preset='medium',        # –õ—É—á—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ
                           crf=20,                 # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
                           pix_fmt='yuv420p',
                           s='1080x1920',
                           **{'b:v': '6M',         # –ë–∏—Ç—Ä–µ–π—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                              'b:a': '192k',
                              'maxrate': '8M',
                              'bufsize': '12M'})
                    .overwrite_output()
                    .run(quiet=True)
                )
                logger.info(f"üíª –ë–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ - –∫–ª–∏–ø {clip_number} —Å–æ–∑–¥–∞–Ω —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º")
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                (
                    ffmpeg
                    .output(final_video, audio, output_path, 
                           vcodec='libx264',
                           acodec='aac',
                           preset='fast',          # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç
                           crf=22,                 # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                           pix_fmt='yuv420p',
                           s='1080x1920')
                    .overwrite_output()
                    .run(quiet=True)
                )
                logger.info(f"üíª –ö–ª–∏–ø {clip_number} —Å–æ–∑–¥–∞–Ω —Å CPU")
    
    def _add_animated_subtitles(self, video, subtitles: list, start_time: float, duration: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        if not subtitles:
            return video
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_subtitles = []
        for sub in subtitles:
            sub_start = sub['start'] - start_time
            sub_end = sub['end'] - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å—É–±—Ç–∏—Ç—Ä –≤ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
            if sub_end > 0 and sub_start < duration:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
                adjusted_start = max(0, sub_start)
                adjusted_end = min(duration, sub_end)
                
                segment_subtitles.append({
                    'text': sub['text'],
                    'start': adjusted_start,
                    'end': adjusted_end
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—É–±—Ç–∏—Ç—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è
        result_video = video
        for i, sub in enumerate(segment_subtitles):
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è (–ø–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ)
            bounce_y = f"h-600-20*sin(2*PI*t*3)"  # –ü–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ –≤—ã—à–µ
            
            result_video = result_video.drawtext(
                text=sub['text'],
                fontfile=self.font_path if os.path.exists(self.font_path) else None,
                fontsize=70,  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                fontcolor='white',
                bordercolor='black',
                borderw=3,  # –£–≤–µ–ª–∏—á–∏–ª —Ç–æ–ª—â–∏–Ω—É –æ–±–≤–æ–¥–∫–∏
                x='(w-text_w)/2',
                y=bounce_y,
                enable=f"between(t,{sub['start']},{sub['end']})"
            )
        
        return result_video
    
    def _check_gpu_support(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–ª—è ffmpeg - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø COLAB"""
        # –í Google Colab GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å ffmpeg
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        logger.info("‚ùå GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è Colab")
        return False